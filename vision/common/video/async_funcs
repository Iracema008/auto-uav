''' Giovanni's file '''

import asyncio
import cv2
import os

from common.video.gps_pull_mod import gpsgrabber
from common.video.video_capture import VideoCapture

#GPS PULLER
array_Frame = None

image_counter = 0

async def gps_coords():
    print("Give GPS Coordinates")
    lat, lon, hdg = gpsgrabber()

    #await asyncio.sleep(1)
    return lat, lon, hdg 


# async def save_frame(temp_frame, temp_ids):
#     print("Saving frame...")
#     #await asyncio.sleep(2)


#     gray =cv2.cvtColor(temp_frame, cv2.COLOR_BGR2GRAY)
#     cv2.imwrite("/home/pi/autonomous-uav/vision/save_images/saved_frame", gray)
    
#     #possibly write to list
#     with open("temp_ids_save.txt", "w") as file:
#         file.write(str(temp_ids))
        
#     image_counter += 1

#     print("Frame saved.")
#     return (temp_frame, temp_ids)

async def save_frame(temp_frame, temp_ids):
    global image_counter

    print("Saving frameâ€¦")
    
    gray = cv2.cvtColor(temp_frame, cv2.COLOR_BGR2GRAY)

    save_dir = "/home/pi/autonomous-uav/vision/save_images"
    os.makedirs(save_dir, exist_ok=True)

    filename = f"frame{image_counter:04d}.png"
    full_path = os.path.join(save_dir, filename)

    success = cv2.imwrite(full_path, gray)
    if not success:
        print(f"Failed to write image to {full_path}")
    else:
        print(f"Saved image to {full_path}")
    
    ids_file = os.path.join(save_dir, "temp_ids_save.txt")
    with open("/home/pi/autonomous-uav/vision/save_images/temp_ids_save.txt", "w") as file:
        file.write(str(temp_ids))

    image_counter += 1

    print("Frame + IDs saved.")
    return temp_frame, temp_ids

t_lat = 0
t_lon = 0
t_hdg = 0
t_frame= None

#CONCURRENT FRAME AND GPS
async def CONCURRENT_FRAME_AND_GPS(temp_frame, temp_ids):
    await asyncio.gather(
        gps_coords(),
        save_frame(temp_frame, temp_ids)

    )

    return t_frame, t_lat, t_lon, t_hdg, temp_ids


#Both run at the same time
#while True:
#    asyncio.run(CONCURRENT_FRAME_AND_GPS())
#    print("Got GPS Coordinates and Frame at same time.")

'''
t_lat, t_lon, t_hdg = gps_coords(),
        t_frame = save_frame(temp_frame, temp_ids)

'''

'''
 async def save_frame(temp):
     print("Saving frame...")
     await asyncio.sleep(2)
     corners, ids, _ = aruco.detectMarkers(gray, aruco_dict, paramaters = parameters)
     while True:
         frame = v
         ideo.read()
         if frame is not None:
             # Convert to grayscale
             gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

             # Load dictionary & parameters
             aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_50)
             parameters = aruco.DetectorParameters_create()

             # Detect markers
             corners, ids, rejected = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

             # Draw detected markers and print their IDs
             if ids is not None:
                 aruco.drawDetectedMarkers(frame, corners, ids)
                 print("Detected IDs:", ids.flatten())

             # Show frame with annotations
             cv2.imshow("Aruco Detection", frame)

         if cv2.waitKey(1) & 0xFF == ord('q'):
             break
     frame_data = "fake_frame_data"  # Replace with actual frame capture logic
     print("Frame saved.")
     return frame_data
'''
