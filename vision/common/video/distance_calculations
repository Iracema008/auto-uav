
import cv2 as cv
from cv2 import aruco
import numpy as np
import math

# Load calibration data
calib_data_path = r"MultiMatrix.npz"
calib_data = np.load(calib_data_path)

cam_mat = calib_data["camMatrix"]
dist_coef = calib_data["distCoef"]

def detect_marker_and_get_gps(frame, marker_size_cm):
    marker_dict = aruco.getPredefinedDictionary(aruco.DICT_6X6_250)
    parameters = aruco.DetectorParameters()
    detector = aruco.ArucoDetector(marker_dict, parameters)

    gray_frame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    marker_corners, marker_IDs, _ = detector.detectMarkers(gray_frame)

    distance = None

    if marker_IDs is not None:
        for i, (ids, corners) in enumerate(zip(marker_IDs, marker_corners)):
            corners = corners.reshape(4, 2).astype(np.float32)

            # Define 3D model points of the marker
            half_size = marker_size_cm / 2.0
            obj_points = np.array([
                [-half_size,  half_size, 0],
                [ half_size,  half_size, 0],
                [ half_size, -half_size, 0],
                [-half_size, -half_size, 0]
            ], dtype=np.float32)

            retval, rVec, tVec = cv.solvePnP(
                obj_points, corners, cam_mat, dist_coef
            )

            if not retval:
                continue

            distance = np.linalg.norm(tVec)

            corners_int = corners.astype(int)
            top_right = corners_int[0].ravel()
            bottom_right = corners_int[2].ravel()

            cv.polylines(frame, [corners_int], True, (0, 255, 255), 4, cv.LINE_AA)
            cv.drawFrameAxes(frame, cam_mat, dist_coef, rVec, tVec, marker_size_cm * 0.5)

            cv.putText(
                frame,
                f"id: {ids[0]} Dist: {round(distance, 2)}",
                top_right,
                cv.FONT_HERSHEY_PLAIN,
                1.3,
                (0, 0, 255),
                2,
                cv.LINE_AA,
            )
            cv.putText(
                frame,
                f"x:{round(tVec[0][0], 1)} y:{round(tVec[1][0], 1)}",
                bottom_right,
                cv.FONT_HERSHEY_PLAIN,
                1.0,
                (0, 0, 255),
                2,
                cv.LINE_AA,
            )
    else:
        print("No ArUco markers detected.")

    #cv.imshow("Aruco Frame", frame)
    #cv.waitKey(0)
    #cv.destroyAllWindows()
    print(distance)

    return distance, frame
